//模拟实现僵尸进程
 #include<iostream>                                                                                                                                                                     
 #include<unistd.h>
 #include<sys/wait.h>
 #include<stdio.h>
 #include<stdlib.h>
 using namespace std;
 int main()
 {
   //僵尸进程：子进程先于父进程退出，父进程就会成为僵尸进程
   pid_t pid = fork();

   if(pid == 0)
   {
    //子进程
     printf("子进程：pid = %d,ppid = %d\n",getpid(),getppid());
     sleep(5);
     exit(-1);
   }
   else if(pid > 0)
   {
     //父进程 
     printf("父进程：pid = %d,ppid = %d\n",getpid(),getppid());
    // wait(NULL);
     sleep(2);
     int i = 0;
     while(i < 40)
     {
       i++;
      sleep(1);
        cout<<"父进程"<<endl;
     }
   }
   else
   {
    //usrsleep(3);
     cout<<"error"<<endl;
   }
  return 0;
 }
 
 //模拟实现孤儿进程
  #include<iostream>                                                                                                                                                                     
 #include<unistd.h>
  #include<stdlib.h>
  using namespace std;
 #include<stdio.h>
 
 int main()
  {
    pid_t pid = fork();
   if(pid == 0)
   {
     printf("子进程:pid=%d,ppid=%d\n",getpid(),getppid());
     while(1)
     {
       cout<<"子进程"<<endl;
       sleep(2);
     }
   }
   else if(pid > 0)
   {
     printf("父进程:pid=%d,ppid=%d\n",getpid(),getppid());
     sleep(2);
     exit(-1);
   }
   else
   {
     cout<<"error"<<endl;
   }
   return 0;
 }

