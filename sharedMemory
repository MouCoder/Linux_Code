//comm.h
#pragma once    
#include<stdio.h>    
#include <sys/types.h>    
#include <sys/ipc.h>    
#include <sys/shm.h>    
#include<stdlib.h>    
#include<unistd.h>                                                                                                                                                                         
#define SHM_SIZE 4096            
                                 
int create_shmid();              
int destory_shm(int shmid);      
int commshm(int size,int flags);    
int get_shmid();

//comm.c
#include"comm.h"                                                                                                                                                                           

//创建共享内存

int commshm(int size,int flags)
{
  //生成唯一表示
  key_t key = ftok("./test",0x6666);
  if(key == -1)
  {
    //error
    perror("create key error");
    exit(-1);
  }
  //创建共享内存
  int shmid = shmget(key,size,flags);
  if(shmid < 0)
  {
    perror("create shmid error");
    exit(-1);
  }
  return shmid;
}

//销毁
int destory_shm(int shmid)
{
  if(shmctl(shmid, IPC_RMID, NULL) < 0)
  {
     perror("shmctl");
      return -1;     
  }
  return 0;
}

//创建
int create_shmid()
{
  return commshm(SHM_SIZE,IPC_CREAT | IPC_EXCL | 0666);
}

//获取shmid
int get_shmid()
{
  int shmid = commshm(SHM_SIZE,IPC_CREAT);
  return shmid;
}               

//server.c
#include"comm.h"    
    
int main()    
{    
  //创建共享内存段    
  int shmid = create_shmid();    
  //连接共享内存段到进程地址空间    
  char *addr = (char*)shmat(shmid, NULL, 0);    
  sleep(2);    
  int i = 0;    
  while(i++<26){    
     printf("client# %s\n", addr);    
     sleep(1);    
  }    
  //脱离内存段    
  shmdt(addr);    
  sleep(2);                                                                                                                                                                                
  //销毁共享内存    
  destory_shm(shmid);    
  return 0;    
}

//client.c 
#include"comm.h"    
    
int main()    
{    
  //获取shmid    
  int shmid = get_shmid();    
  sleep(1);    
  //将共享内存段连接到进程地址空间    
  char *addr = (char*)shmat(shmid, NULL, 0);    
  sleep(2);    
  int i = 0;    
  while(i<26){    
    //向共享内存段写入数据    
      addr[i] = 'A'+i;    
      i++;                                                                                                                                                                                 
      addr[i] = 0;    
      sleep(1);    
  }    
  //脱离    
  shmdt(addr);    
  sleep(2);    
  return 0;    
}    
