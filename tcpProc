//服务器端
#include<iostream>                                                                                                                                                                         
#include<string>    
#include<sys/types.h>    
#include<sys/socket.h>    
#include<netinet/in.h>    
#include<arpa/inet.h>    
#include<unistd.h>    
    
class tcpServer    
{    
private:    
    int port;//服务器端口号    
    int sock;//套接字，需要进行绑定    
public:    
    tcpServer(int _port)    
      :port(_port)    
    {}    
    //初始化    
    void initServer()    
    { 
        //发送一个singnalchid信号，父进程不必关注子进程的退出状态
        signal(SIGCHLD, SIG_IGN);
   
        //创建套接字(IPV4使用AF_INET，面向字节流的使用SOCK_STREAM，默认为0)    
        sock = socket(AF_INET,SOCK_STREAM,0);    
            
        struct sockaddr_in localAddr;//服务器端地址（包含Ip地址和端口号）    
        localAddr.sin_family = AF_INET;    
        localAddr.sin_port = htons(port);//端口号,将主机序转成网络序    
        localAddr.sin_addr.s_addr = INADDR_ANY;//任意IP    
        //绑定(套接字，地址，地址长度)    
        if(bind(sock,(struct sockaddr*)&localAddr,sizeof(localAddr)))    
        {    
            //绑定失败    
            std::cerr<<"服务器绑定失败"<<std::endl;    
            exit(1);    
        }    
    
        //监听(sock处于监听状态，最多允许等待的客户端数)    
        listen(sock,5);    
    }    
    void service(int clientSock)
    {
        std::cout<<"servic..."<<std::endl;
        char buf[255];
        while(1)
        {                                                                                                                                                                                  
            //接收客户端发送的消息
            int len1 = recv(clientSock,buf,sizeof(buf)-1,0);
            if(len1 > 0)
            {
                buf[len1] = 0;
                std::cout<<buf<<std::endl;
                //向客户端发送消息
                char* msg = buf;
                 
                send(clientSock,msg,sizeof(msg),0);
            }
        }
    }
    //begin
    void startServer()
    {
        //接受连接
        struct sockaddr_in clientAddr;//客户端地址
        while(1)
        {
            socklen_t len = sizeof(clientAddr);
            int clientSock = accept(sock,(struct sockaddr*)&clientAddr,&len);
 
            if(clientSock < 0)
            {
                std::cout<<"accept error..."<<std::endl;
                continue;
            }
 
            //取出客户端的IP地址和端口号
            std::string IP = inet_ntoa(clientAddr.sin_addr);
      
            std::cout<<"get a new connection..."<<std::endl;
            std::cout<<IP<<":"<<ntohs(clientAddr.sin_port)<<std::endl;
 
            //开始服务
                        //创建子进程    
            pid_t id = fork();    
            if(id == 0)    
            {    
                close(sock);//关闭sock不会影响父进程    
                //子进程    
                service(clientSock);    
                exit(0);    
            }    
 
        }
    }
}; 
